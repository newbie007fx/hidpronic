// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"
	errors "hidroponic/internal/errors"
	entities "hidroponic/internal/module/automation/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// DeleteAutomationByPlantID provides a mock function with given fields: ctx, plantID
func (_m *MockRepository) DeleteAutomationByPlantID(ctx context.Context, plantID uint) *errors.BaseError {
	ret := _m.Called(ctx, plantID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAutomationByPlantID")
	}

	var r0 *errors.BaseError
	if rf, ok := ret.Get(0).(func(context.Context, uint) *errors.BaseError); ok {
		r0 = rf(ctx, plantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.BaseError)
		}
	}

	return r0
}

// MockRepository_DeleteAutomationByPlantID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAutomationByPlantID'
type MockRepository_DeleteAutomationByPlantID_Call struct {
	*mock.Call
}

// DeleteAutomationByPlantID is a helper method to define mock.On call
//   - ctx context.Context
//   - plantID uint
func (_e *MockRepository_Expecter) DeleteAutomationByPlantID(ctx interface{}, plantID interface{}) *MockRepository_DeleteAutomationByPlantID_Call {
	return &MockRepository_DeleteAutomationByPlantID_Call{Call: _e.mock.On("DeleteAutomationByPlantID", ctx, plantID)}
}

func (_c *MockRepository_DeleteAutomationByPlantID_Call) Run(run func(ctx context.Context, plantID uint)) *MockRepository_DeleteAutomationByPlantID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockRepository_DeleteAutomationByPlantID_Call) Return(_a0 *errors.BaseError) *MockRepository_DeleteAutomationByPlantID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_DeleteAutomationByPlantID_Call) RunAndReturn(run func(context.Context, uint) *errors.BaseError) *MockRepository_DeleteAutomationByPlantID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllAutomation provides a mock function with given fields: ctx, limit, offset, filter
func (_m *MockRepository) GetAllAutomation(ctx context.Context, limit int, offset int, filter map[string]string) ([]entities.Automation, *errors.BaseError) {
	ret := _m.Called(ctx, limit, offset, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetAllAutomation")
	}

	var r0 []entities.Automation
	var r1 *errors.BaseError
	if rf, ok := ret.Get(0).(func(context.Context, int, int, map[string]string) ([]entities.Automation, *errors.BaseError)); ok {
		return rf(ctx, limit, offset, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, map[string]string) []entities.Automation); ok {
		r0 = rf(ctx, limit, offset, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Automation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, map[string]string) *errors.BaseError); ok {
		r1 = rf(ctx, limit, offset, filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.BaseError)
		}
	}

	return r0, r1
}

// MockRepository_GetAllAutomation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllAutomation'
type MockRepository_GetAllAutomation_Call struct {
	*mock.Call
}

// GetAllAutomation is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
//   - offset int
//   - filter map[string]string
func (_e *MockRepository_Expecter) GetAllAutomation(ctx interface{}, limit interface{}, offset interface{}, filter interface{}) *MockRepository_GetAllAutomation_Call {
	return &MockRepository_GetAllAutomation_Call{Call: _e.mock.On("GetAllAutomation", ctx, limit, offset, filter)}
}

func (_c *MockRepository_GetAllAutomation_Call) Run(run func(ctx context.Context, limit int, offset int, filter map[string]string)) *MockRepository_GetAllAutomation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(map[string]string))
	})
	return _c
}

func (_c *MockRepository_GetAllAutomation_Call) Return(_a0 []entities.Automation, _a1 *errors.BaseError) *MockRepository_GetAllAutomation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetAllAutomation_Call) RunAndReturn(run func(context.Context, int, int, map[string]string) ([]entities.Automation, *errors.BaseError)) *MockRepository_GetAllAutomation_Call {
	_c.Call.Return(run)
	return _c
}

// GetAutomationByID provides a mock function with given fields: ctx, id
func (_m *MockRepository) GetAutomationByID(ctx context.Context, id uint) (*entities.Automation, *errors.BaseError) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAutomationByID")
	}

	var r0 *entities.Automation
	var r1 *errors.BaseError
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*entities.Automation, *errors.BaseError)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *entities.Automation); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Automation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) *errors.BaseError); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.BaseError)
		}
	}

	return r0, r1
}

// MockRepository_GetAutomationByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAutomationByID'
type MockRepository_GetAutomationByID_Call struct {
	*mock.Call
}

// GetAutomationByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
func (_e *MockRepository_Expecter) GetAutomationByID(ctx interface{}, id interface{}) *MockRepository_GetAutomationByID_Call {
	return &MockRepository_GetAutomationByID_Call{Call: _e.mock.On("GetAutomationByID", ctx, id)}
}

func (_c *MockRepository_GetAutomationByID_Call) Run(run func(ctx context.Context, id uint)) *MockRepository_GetAutomationByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockRepository_GetAutomationByID_Call) Return(_a0 *entities.Automation, _a1 *errors.BaseError) *MockRepository_GetAutomationByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetAutomationByID_Call) RunAndReturn(run func(context.Context, uint) (*entities.Automation, *errors.BaseError)) *MockRepository_GetAutomationByID_Call {
	_c.Call.Return(run)
	return _c
}

// InsertAutomation provides a mock function with given fields: ctx, data
func (_m *MockRepository) InsertAutomation(ctx context.Context, data *entities.Automation) *errors.BaseError {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for InsertAutomation")
	}

	var r0 *errors.BaseError
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Automation) *errors.BaseError); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.BaseError)
		}
	}

	return r0
}

// MockRepository_InsertAutomation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertAutomation'
type MockRepository_InsertAutomation_Call struct {
	*mock.Call
}

// InsertAutomation is a helper method to define mock.On call
//   - ctx context.Context
//   - data *entities.Automation
func (_e *MockRepository_Expecter) InsertAutomation(ctx interface{}, data interface{}) *MockRepository_InsertAutomation_Call {
	return &MockRepository_InsertAutomation_Call{Call: _e.mock.On("InsertAutomation", ctx, data)}
}

func (_c *MockRepository_InsertAutomation_Call) Run(run func(ctx context.Context, data *entities.Automation)) *MockRepository_InsertAutomation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Automation))
	})
	return _c
}

func (_c *MockRepository_InsertAutomation_Call) Return(_a0 *errors.BaseError) *MockRepository_InsertAutomation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_InsertAutomation_Call) RunAndReturn(run func(context.Context, *entities.Automation) *errors.BaseError) *MockRepository_InsertAutomation_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAutomation provides a mock function with given fields: ctx, data
func (_m *MockRepository) UpdateAutomation(ctx context.Context, data *entities.Automation) *errors.BaseError {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAutomation")
	}

	var r0 *errors.BaseError
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Automation) *errors.BaseError); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.BaseError)
		}
	}

	return r0
}

// MockRepository_UpdateAutomation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAutomation'
type MockRepository_UpdateAutomation_Call struct {
	*mock.Call
}

// UpdateAutomation is a helper method to define mock.On call
//   - ctx context.Context
//   - data *entities.Automation
func (_e *MockRepository_Expecter) UpdateAutomation(ctx interface{}, data interface{}) *MockRepository_UpdateAutomation_Call {
	return &MockRepository_UpdateAutomation_Call{Call: _e.mock.On("UpdateAutomation", ctx, data)}
}

func (_c *MockRepository_UpdateAutomation_Call) Run(run func(ctx context.Context, data *entities.Automation)) *MockRepository_UpdateAutomation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Automation))
	})
	return _c
}

func (_c *MockRepository_UpdateAutomation_Call) Return(_a0 *errors.BaseError) *MockRepository_UpdateAutomation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_UpdateAutomation_Call) RunAndReturn(run func(context.Context, *entities.Automation) *errors.BaseError) *MockRepository_UpdateAutomation_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
