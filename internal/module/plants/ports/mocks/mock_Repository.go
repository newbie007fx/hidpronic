// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"
	errors "hidroponic/internal/errors"
	entities "hidroponic/internal/module/plants/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// DeletePlant provides a mock function with given fields: ctx, id
func (_m *MockRepository) DeletePlant(ctx context.Context, id uint) *errors.BaseError {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePlant")
	}

	var r0 *errors.BaseError
	if rf, ok := ret.Get(0).(func(context.Context, uint) *errors.BaseError); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.BaseError)
		}
	}

	return r0
}

// MockRepository_DeletePlant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePlant'
type MockRepository_DeletePlant_Call struct {
	*mock.Call
}

// DeletePlant is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
func (_e *MockRepository_Expecter) DeletePlant(ctx interface{}, id interface{}) *MockRepository_DeletePlant_Call {
	return &MockRepository_DeletePlant_Call{Call: _e.mock.On("DeletePlant", ctx, id)}
}

func (_c *MockRepository_DeletePlant_Call) Run(run func(ctx context.Context, id uint)) *MockRepository_DeletePlant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockRepository_DeletePlant_Call) Return(_a0 *errors.BaseError) *MockRepository_DeletePlant_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_DeletePlant_Call) RunAndReturn(run func(context.Context, uint) *errors.BaseError) *MockRepository_DeletePlant_Call {
	_c.Call.Return(run)
	return _c
}

// GetActivePlant provides a mock function with given fields: ctx
func (_m *MockRepository) GetActivePlant(ctx context.Context) (*entities.Plant, *errors.BaseError) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetActivePlant")
	}

	var r0 *entities.Plant
	var r1 *errors.BaseError
	if rf, ok := ret.Get(0).(func(context.Context) (*entities.Plant, *errors.BaseError)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *entities.Plant); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Plant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) *errors.BaseError); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.BaseError)
		}
	}

	return r0, r1
}

// MockRepository_GetActivePlant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActivePlant'
type MockRepository_GetActivePlant_Call struct {
	*mock.Call
}

// GetActivePlant is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepository_Expecter) GetActivePlant(ctx interface{}) *MockRepository_GetActivePlant_Call {
	return &MockRepository_GetActivePlant_Call{Call: _e.mock.On("GetActivePlant", ctx)}
}

func (_c *MockRepository_GetActivePlant_Call) Run(run func(ctx context.Context)) *MockRepository_GetActivePlant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRepository_GetActivePlant_Call) Return(_a0 *entities.Plant, _a1 *errors.BaseError) *MockRepository_GetActivePlant_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetActivePlant_Call) RunAndReturn(run func(context.Context) (*entities.Plant, *errors.BaseError)) *MockRepository_GetActivePlant_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPlant provides a mock function with given fields: ctx
func (_m *MockRepository) GetAllPlant(ctx context.Context) ([]entities.Plant, *errors.BaseError) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPlant")
	}

	var r0 []entities.Plant
	var r1 *errors.BaseError
	if rf, ok := ret.Get(0).(func(context.Context) ([]entities.Plant, *errors.BaseError)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entities.Plant); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Plant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) *errors.BaseError); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.BaseError)
		}
	}

	return r0, r1
}

// MockRepository_GetAllPlant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPlant'
type MockRepository_GetAllPlant_Call struct {
	*mock.Call
}

// GetAllPlant is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepository_Expecter) GetAllPlant(ctx interface{}) *MockRepository_GetAllPlant_Call {
	return &MockRepository_GetAllPlant_Call{Call: _e.mock.On("GetAllPlant", ctx)}
}

func (_c *MockRepository_GetAllPlant_Call) Run(run func(ctx context.Context)) *MockRepository_GetAllPlant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRepository_GetAllPlant_Call) Return(_a0 []entities.Plant, _a1 *errors.BaseError) *MockRepository_GetAllPlant_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetAllPlant_Call) RunAndReturn(run func(context.Context) ([]entities.Plant, *errors.BaseError)) *MockRepository_GetAllPlant_Call {
	_c.Call.Return(run)
	return _c
}

// GetPlantByID provides a mock function with given fields: ctx, id
func (_m *MockRepository) GetPlantByID(ctx context.Context, id uint) (*entities.Plant, *errors.BaseError) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPlantByID")
	}

	var r0 *entities.Plant
	var r1 *errors.BaseError
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*entities.Plant, *errors.BaseError)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *entities.Plant); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Plant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) *errors.BaseError); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.BaseError)
		}
	}

	return r0, r1
}

// MockRepository_GetPlantByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlantByID'
type MockRepository_GetPlantByID_Call struct {
	*mock.Call
}

// GetPlantByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
func (_e *MockRepository_Expecter) GetPlantByID(ctx interface{}, id interface{}) *MockRepository_GetPlantByID_Call {
	return &MockRepository_GetPlantByID_Call{Call: _e.mock.On("GetPlantByID", ctx, id)}
}

func (_c *MockRepository_GetPlantByID_Call) Run(run func(ctx context.Context, id uint)) *MockRepository_GetPlantByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockRepository_GetPlantByID_Call) Return(_a0 *entities.Plant, _a1 *errors.BaseError) *MockRepository_GetPlantByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetPlantByID_Call) RunAndReturn(run func(context.Context, uint) (*entities.Plant, *errors.BaseError)) *MockRepository_GetPlantByID_Call {
	_c.Call.Return(run)
	return _c
}

// InsertPlant provides a mock function with given fields: ctx, data
func (_m *MockRepository) InsertPlant(ctx context.Context, data *entities.Plant) *errors.BaseError {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for InsertPlant")
	}

	var r0 *errors.BaseError
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Plant) *errors.BaseError); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.BaseError)
		}
	}

	return r0
}

// MockRepository_InsertPlant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertPlant'
type MockRepository_InsertPlant_Call struct {
	*mock.Call
}

// InsertPlant is a helper method to define mock.On call
//   - ctx context.Context
//   - data *entities.Plant
func (_e *MockRepository_Expecter) InsertPlant(ctx interface{}, data interface{}) *MockRepository_InsertPlant_Call {
	return &MockRepository_InsertPlant_Call{Call: _e.mock.On("InsertPlant", ctx, data)}
}

func (_c *MockRepository_InsertPlant_Call) Run(run func(ctx context.Context, data *entities.Plant)) *MockRepository_InsertPlant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Plant))
	})
	return _c
}

func (_c *MockRepository_InsertPlant_Call) Return(_a0 *errors.BaseError) *MockRepository_InsertPlant_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_InsertPlant_Call) RunAndReturn(run func(context.Context, *entities.Plant) *errors.BaseError) *MockRepository_InsertPlant_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePlant provides a mock function with given fields: ctx, data
func (_m *MockRepository) UpdatePlant(ctx context.Context, data *entities.Plant) *errors.BaseError {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePlant")
	}

	var r0 *errors.BaseError
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Plant) *errors.BaseError); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.BaseError)
		}
	}

	return r0
}

// MockRepository_UpdatePlant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePlant'
type MockRepository_UpdatePlant_Call struct {
	*mock.Call
}

// UpdatePlant is a helper method to define mock.On call
//   - ctx context.Context
//   - data *entities.Plant
func (_e *MockRepository_Expecter) UpdatePlant(ctx interface{}, data interface{}) *MockRepository_UpdatePlant_Call {
	return &MockRepository_UpdatePlant_Call{Call: _e.mock.On("UpdatePlant", ctx, data)}
}

func (_c *MockRepository_UpdatePlant_Call) Run(run func(ctx context.Context, data *entities.Plant)) *MockRepository_UpdatePlant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Plant))
	})
	return _c
}

func (_c *MockRepository_UpdatePlant_Call) Return(_a0 *errors.BaseError) *MockRepository_UpdatePlant_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_UpdatePlant_Call) RunAndReturn(run func(context.Context, *entities.Plant) *errors.BaseError) *MockRepository_UpdatePlant_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
